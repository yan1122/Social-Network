{"version":3,"sources":["Components/Dialogs/Dialogs.module.css","Components/Users/Users.module.css","Components/Header/Header.module.css","Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/NavBar/NavBar.module.css","Components/NavBar/NavBar.tsx","Components/News/News.tsx","Components/Settings/Settings.tsx","Components/Music/Music.tsx","api/Api.ts","Redux/ProfileReducer.ts","Redux/DialogsReducer.ts","Redux/SideBarReducer.ts","Redux/Store.ts","Components/Dialogs/DialogsItem/DialogsItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx","Redux/UsersReducer.ts","assets/Img/user-png-image-9.png","Components/Users/Users.tsx","Components/Users/UsersContainer.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx","Components/Header/Header.tsx","Redux/AuthReducer.ts","Components/Header/HeaderContainer.tsx","Components/Login/Login.tsx","App.tsx","Redux/ReduxStore.ts","index.tsx"],"names":["module","exports","NavBar","className","s","nav","to","activeClassName","ActiveItem","item","News","Settings","Music","instanse","axios","create","withCredentials","baseURL","headers","UsersApi","currentPage","PageSize","get","then","response","data","userId","post","delete","ProfileApi","AuthApi","InitialState","posts","message","id","v1","likesCount","newPostText","profile","ProfileReducer","state","action","type","newPost","newState","push","NewText","dialogsData","name","messagesData","newMessageText","DialogsReducer","body","SideBarReducer","UpdateNewPostTextActionCreator","DialogItem","props","Message","Dialogs","dialogsElement","map","d","messagesElement","m","isAuth","dialogs","dialogsItems","messages","value","onChange","e","onNewMessageChange","currentTarget","placeholder","onClick","onSendMessageClick","DialogsContainer","connect","DialogsPage","Auth","dispatch","text","users","totalUsersCount","isFetching","followingInProgress","followSuccess","UserId","unFollowSuccess","setUsers","setTotalUsersCount","usersCount","toggleIsFetching","toggleFollowingProgress","UsersReducer","StateCopy","u","followed","Page","filter","Users","PagesCount","Math","ceil","pages","i","p","onPageChanged","selectedPage","src","photos","small","UserPhoto","photo","disabled","some","unFollow","follow","status","UsersContainerComponent","getUsers","setCurrentPage","this","CircularProgress","React","Component","UsersPage","items","totalCount","resultCode","ProfileInfo","info","fullName","large","alt","aboutMe","lookingForAJob","lookingForAJobDescription","color","Post","MyPosts","postsElements","newPostElement","createRef","title","area","updateNewPostText","ref","addButton","addPost","MyPostsContainer","ProfilePage","Profile","content","withUrlDataContainerComponent","withRouter","useEffect","match","params","getUserProfile","ProfileContainer","Header","header","loginBlock","login","email","setAuthUserData","AuthReducer","HeaderContainer","Login","App","store","getState","path","render","UsersContainer","reducers","combineReducers","SideBar","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","bind","document","getElementById"],"mappings":"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","file":"static/js/main.f43229b3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3tpU9\",\"dialogsItems\":\"Dialogs_dialogsItems__ienY8\",\"messages\":\"Dialogs_messages__3m0ZH\",\"message\":\"Dialogs_message__3pa39\",\"item\":\"Dialogs_item__2lstC\",\"ActiveItem\":\"Dialogs_ActiveItem__tWhqB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"Users_photo__qY-Gi\",\"selectedPage\":\"Users_selectedPage__mzLTp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1riTh\",\"loginBlock\":\"Header_loginBlock__2AF6M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"ProfileInfo_info__1Kbs0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3RXIq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__1i1C_\",\"item\":\"NavBar_item__1iqZI\",\"ActiveItem\":\"NavBar_ActiveItem__2m0l5\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './NavBar.module.css'\r\n\r\nconst NavBar = () => {\r\n    return(\r\n        <div className={s.nav}>\r\n        <div>\r\n          <NavLink to='/profile' activeClassName={s.ActiveItem} className={s.item}>Profile</NavLink>\r\n        </div>\r\n        <div>\r\n          <NavLink to='/dialogs' activeClassName={s.ActiveItem} className={s.item}>Messages</NavLink>\r\n        </div>\r\n        <div>\r\n          <NavLink to='/news' activeClassName={s.ActiveItem} className={s.item}>News</NavLink>\r\n        </div>\r\n            <div>\r\n                <NavLink to='/users' activeClassName={s.ActiveItem} className={s.item}>Users</NavLink>\r\n            </div>\r\n        <div>\r\n          <NavLink to='/music' activeClassName={s.ActiveItem} className={s.item}>Music</NavLink>\r\n        </div>\r\n        <div>\r\n          <NavLink to='settings' activeClassName={s.ActiveItem} className={s.item}>Settings</NavLink>\r\n        </div>\r\n        \r\n      </div>\r\n    )\r\n}\r\n\r\nexport default NavBar","import React from 'react';\r\nimport s from './News.module.css'\r\n\r\nconst News =() => {\r\n    return(\r\n        <span>News</span>\r\n    )\r\n}\r\n\r\nexport default News","import React from 'react';\r\nimport s from './Settings.module.css'\r\n\r\nconst Settings =() => {\r\n    return(\r\n        <span>Settings</span>\r\n    )\r\n}\r\n\r\nexport default Settings","import React from 'react';\r\nimport s from './Music.module.css'\r\n\r\nconst Music =() => {\r\n    return(\r\n        <span>Music</span>\r\n    )\r\n}\r\n\r\nexport default Music","import axios from \"axios\";\r\n\r\nconst baseUrl = `https://social-network.samuraijs.com/api/1.0/`\r\n\r\nconst instanse = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        \"API-KEY\": \"ba5cecd6-1162-4b9f-80a1-8473e46fd1a8\"\r\n    }\r\n})\r\n\r\nexport const UsersApi = {\r\n    getUsers(currentPage: number = 1, PageSize: number = 10) {\r\n        return instanse.get(`users?page=${currentPage}&count=${PageSize}`).then(response => response.data)\r\n    },\r\n    FollowUser(userId: any) {\r\n        return instanse.post(`follow/${userId}`, {}).then(response => {\r\n            return (response.data)\r\n        })\r\n    },\r\n    UnFollowUser(userId: any) {\r\n        return instanse.delete(`follow/${userId}`).then(response => response.data)\r\n    },\r\n}\r\n\r\nexport const ProfileApi = {\r\n    getProfile(userId: string) {\r\n        return instanse.get(`profile/` + userId)\r\n    }\r\n}\r\n\r\nexport const AuthApi = {\r\n    me() {\r\n        return instanse.get(`auth/me`)\r\n            .then(response => response.data)\r\n    }\r\n}\r\n\r\n\r\n","import {v1} from \"uuid\";\r\nimport {ProfilePageType} from \"./Store\";\r\nimport {ProfileApi} from \"../api/Api\";\r\n\r\nlet InitialState = {\r\n    posts: [\r\n        {message: 'Я русский', id: v1(), likesCount: 12},\r\n        {message: 'I am not Russian', id: v1(), likesCount: 1},\r\n        {message: 'I am learn React', id: v1(), likesCount: 23},\r\n    ],\r\n    newPostText: '',\r\n    profile:null\r\n}\r\n\r\nexport const ProfileReducer = (state: ProfilePageType = InitialState, action: any) => {\r\n    switch (action.type) {\r\n\r\n        case 'ADD-POST': {\r\n            let newPost = {message: state.newPostText, id: v1(), likesCount: 0}\r\n            let newState = {...state}\r\n            newState.posts = [...state.posts]\r\n            newState.posts.push(newPost)\r\n            newState.newPostText = ''\r\n            return (newState)\r\n        }\r\n\r\n        case 'UPDATE-NEW-POST-TEXT' :\r\n            let newState = {...state}\r\n            newState.newPostText = action.NewText\r\n            return newState\r\n\r\n        case 'SET-USER-PROFILE' : {\r\n            return{...state,profile:action.profile}\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport const setUserProfile = (profile: any) => ({type: 'SET-USER-PROFILE', profile})\r\nexport const getUserProfile = (userId:string) => {\r\n    return (dispatch:any) => {\r\n        ProfileApi.getProfile(userId)\r\n            .then(response => {\r\n                dispatch(setUserProfile(response.data))\r\n            })\r\n    }\r\n}","import {v1} from \"uuid\";\r\nimport {DialogsPageType, StateType} from \"./Store\";\r\nimport {DialogsDataArrayType, MessagesDataArrayType} from \"../Components/Dialogs/Dialogs\";\r\n\r\nexport type InitialStateType = {\r\n    dialogsData:DialogsDataArrayType\r\n    messagesData:MessagesDataArrayType\r\n    newMessageText:string\r\n}\r\n\r\nlet InitialState:InitialStateType = {\r\n    dialogsData:\r\n        [{id: v1(), name: 'Sasha'},\r\n        {id: v1(), name: 'Viktor'},\r\n        {id: v1(), name: 'Lesha'},\r\n        {id: v1(), name: 'Elena'},\r\n        {id: v1(), name: 'Dima'},\r\n        {id: v1(), name: 'Ivan'},]\r\n    ,\r\n    messagesData: [\r\n        {message: 'Hi', id: v1()},\r\n        {message: 'How are you?', id: v1()},\r\n        {message: 'Lets drink beer today', id: v1()},\r\n    ],\r\n    newMessageText:''\r\n}\r\n\r\nexport const DialogsReducer = (state:DialogsPageType = InitialState, action: any) => {\r\n\r\n\r\n\r\n    switch(action.type) {\r\n        case \"UPDATE-NEW-MESSAGE-TEXT\" :{\r\n            state.newMessageText = action.body\r\n            return {...state}}\r\n\r\n        case \"SEND-MESSAGE\" :\r\n            let body = state.newMessageText\r\n            state.messagesData.push({message:body,id:v1()})\r\n            state.newMessageText = ''\r\n            return {...state}\r\n        default:return state\r\n    }\r\n}","import {SideBarType} from \"./Store\";\r\n\r\nlet InitialState = {}\r\n\r\nexport const SideBarReducer = (state:SideBarType = InitialState,action:any) => {\r\n\r\n    return(state)\r\n}","import {MessagesDataType} from './../Components/Dialogs/Dialogs';\r\nimport {v1} from \"uuid\"\r\nimport {DialogsDataType} from \"../Components/Dialogs/Dialogs\"\r\nimport {postsType} from \"../Components/Profile/MyPosts/MyPosts\"\r\nimport {ProfileReducer} from \"./ProfileReducer\";\r\nimport {DialogsReducer} from \"./DialogsReducer\";\r\nimport {SideBarReducer} from \"./SideBarReducer\";\r\nimport {userType} from \"./UsersReducer\";\r\n\r\nexport type StoreType = {\r\n    _state: StateType\r\n    _callSubscriber: () => void\r\n    getState: () => StateType\r\n    subscribe: (observer: () => void) => void\r\n    dispatch: (action: any) => void\r\n}\r\n\r\nexport type ProfilePageType = {\r\n    posts: Array<postsType>\r\n    newPostText: string\r\n}\r\n\r\nexport type DialogsPageType = {\r\n    dialogsData: Array<DialogsDataType>\r\n    messagesData: Array<MessagesDataType>\r\n    newMessageText:string\r\n}\r\n\r\nexport type SideBarType = {}\r\n\r\nexport type UsersPageType = {\r\n    users:Array<userType>\r\n    PageSize:number\r\n    totalUsersCount:number\r\n    currentPage:number\r\n    isFetching:boolean\r\n    followingInProgress:Array<string>\r\n}\r\n\r\nexport type StateType = {\r\n    ProfilePage: ProfilePageType\r\n    DialogsPage: DialogsPageType\r\n    SideBar:SideBarType\r\n    UsersPage:UsersPageType\r\n    Auth:any\r\n}\r\n\r\nlet store: any = {\r\n    _state: {\r\n        ProfilePage: {\r\n            posts: [\r\n                {message: 'Я русский', id: v1(), likesCount: 12},\r\n                {message: 'I am not Russian', id: v1(), likesCount: 1},\r\n                {message: 'I am learn React', id: v1(), likesCount: 23},\r\n            ],\r\n            newPostText: ''\r\n        },\r\n\r\n        DialogsPage: {\r\n            dialogsData: [\r\n                {id: v1(), name: 'Sasha'},\r\n                {id: v1(), name: 'Viktor'},\r\n                {id: v1(), name: 'Lesha'},\r\n                {id: v1(), name: 'Elena'},\r\n                {id: v1(), name: 'Dima'},\r\n                {id: v1(), name: 'Ivan'}\r\n            ],\r\n            messagesData: [\r\n                {message: 'Hi', id: v1()},\r\n                {message: 'How are you?', id: v1()},\r\n                {message: 'Lets drink beer today', id: v1()}\r\n            ],\r\n            newMessageText:''\r\n        },\r\n\r\n        SideBar:{}\r\n    },\r\n\r\n    _callSubscriber() {\r\n        console.log('State changed')\r\n    },\r\n\r\n    getState() {\r\n        return (this._state)\r\n    },\r\n\r\n    subscribe(observer: () => void) {\r\n        this._callSubscriber = observer\r\n    },\r\n\r\n    dispatch(action: any) {\r\n\r\n        ProfileReducer(this._state.ProfilePage,action)\r\n        DialogsReducer(this._state.DialogsPage,action)\r\n        SideBarReducer(this._state.SideBar,action)\r\n            this._callSubscriber()\r\n        }\r\n    }\r\n\r\n\r\nexport const addPostActionCreator = () => {\r\n    return {type: 'ADD-POST'}\r\n}\r\n\r\nexport const UpdateNewPostTextActionCreator = (NewText: string) => {\r\n    return {type: 'UPDATE-NEW-POST-TEXT', NewText: NewText}\r\n}\r\n\r\nexport const UpdateNewMessageTextActionCreator = (body:string) => {\r\n    return {type: 'UPDATE-NEW-MESSAGE-TEXT', body:body}\r\n}\r\n\r\nexport const SendMessageActionCreator = () => {\r\n    return {type: 'SEND-MESSAGE'}\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { v1 } from 'uuid';\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n    return (\r\n        <div >\r\n            <NavLink className={s.item} activeClassName={s.ActiveItem} to={'/dialogs/' + props.id}>{props.name} </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem","import React from 'react';\r\nimport { v1 } from 'uuid';\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\n\r\nexport default Message","import React, {ChangeEvent} from 'react';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport {v1} from 'uuid';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from './DialogsItem/DialogsItem';\r\nimport Message from './Message/Message';\r\nimport {DialogsPageType, SendMessageActionCreator, UpdateNewMessageTextActionCreator} from \"../../Redux/Store\";\r\n\r\n\r\ntype DialogsPropsType = {\r\n    onNewMessageChange: (text: string) => void\r\n    onSendMessageClick: () => void\r\n    dialogsData: Array<DialogsDataType>\r\n    messagesData: Array<MessagesDataType>\r\n    newMessageText:string\r\n    isAuth:boolean\r\n}\r\n\r\nexport type DialogsDataType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport type MessagesDataType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\nexport type DialogsDataArrayType = Array<DialogsDataType>\r\n\r\nexport type MessagesDataArrayType = Array<MessagesDataType>\r\n\r\n\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n    let dialogsElement = props.dialogsData.map((d:DialogsDataType) =>  <DialogItem key={d.id} name={d.name} id={d.id} />)\r\n    let messagesElement = props.messagesData.map((m:MessagesDataType) => <Message key={m.id} message={m.message}/>)\r\n    let newMessageText = props.newMessageText\r\n    let onSendMessageClick = () => {\r\n        props.onSendMessageClick()\r\n    }\r\n    let onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.onNewMessageChange(e.currentTarget.value)\r\n    }\r\n\r\n    if(!props.isAuth) return <Redirect to='/login' />\r\n\r\n    return(\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElement}</div>\r\n                <div>\r\n                    <div><textarea value={newMessageText} onChange={onNewMessageChange}\r\n                                   placeholder={'Enter your message'}></textarea></div>\r\n                    <div>\r\n                        <button onClick={onSendMessageClick}>Send</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs","import React, {ChangeEvent} from 'react';\r\nimport DialogItem from './DialogsItem/DialogsItem';\r\nimport Message from './Message/Message';\r\nimport {\r\n    DialogsPageType,\r\n    SendMessageActionCreator,\r\n    StateType,\r\n    UpdateNewMessageTextActionCreator\r\n} from \"../../Redux/Store\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nexport type DialogsDataType ={\r\n    id:string\r\n    name:string\r\n}\r\n\r\nlet mapStateToProps = (state:StateType) => {\r\nreturn {\r\n    dialogsData:state.DialogsPage.dialogsData,\r\n    messagesData:state.DialogsPage.messagesData,\r\n    newMessageText:state.DialogsPage.newMessageText,\r\n    isAuth:state.Auth.isAuth\r\n}\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        onNewMessageChange:(text:string) => {dispatch(UpdateNewMessageTextActionCreator(text))},\r\n        onSendMessageClick:() => {dispatch(SendMessageActionCreator())}\r\n    }\r\n\r\n}\r\n\r\nconst DialogsContainer = connect(mapStateToProps,mapDispatchToProps)(Dialogs)\r\n\r\nexport default DialogsContainer","import {v1} from \"uuid\";\r\nimport {UsersApi} from \"../api/Api\";\r\n\r\nexport type userType = {\r\n    id: string\r\n    followed: boolean\r\n    photoUrl: string\r\n    name: string\r\n    status: string\r\n    photos: any\r\n}\r\n\r\n\r\nlet InitialState = {\r\n    users: [],\r\n    PageSize: 100,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\n\r\nconst UsersReducer = (state: any = InitialState, action: any) => {\r\n    switch (action.type) {\r\n\r\n        case 'FOLLOW' : {\r\n            let StateCopy = {\r\n                ...state,\r\n                users: state.users.map((u: userType) => {\r\n                    if (u.id === action.UserId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n            return StateCopy\r\n        }\r\n\r\n        case 'UNFOLLOW' :\r\n            let StateCopy = {\r\n                ...state,\r\n                users: state.users.map((u: userType) => {\r\n                    if (u.id === action.UserId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n            return StateCopy\r\n\r\n        case 'SET-USERS':\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n\r\n        case 'SET-CURRENT-PAGE': {\r\n            return {...state, currentPage: action.Page}\r\n        }\r\n\r\n        case 'SET-TOTAL-USERS-COUNT': {\r\n            return {...state, totalUsersCount: action.usersCount}\r\n        }\r\n\r\n        case 'TOGGLE-IS-FETCHING ' : {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n\r\n        case 'TOGGLE-IS-FOLLOWING-PROGRESS' :\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : [state.followingInProgress.filter((id: number) => id != action.userId)]\r\n            }\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followSuccess = (UserId: string) => ({type: 'FOLLOW', UserId})\r\nexport const unFollowSuccess = (UserId: string) => ({type: 'UNFOLLOW', UserId})\r\nexport const setUsers = (users: any) => ({type: 'SET-USERS', users})\r\nexport const setCurrentPage = (Page: number) => ({type: 'SET-CURRENT-PAGE', Page})\r\nexport const setTotalUsersCount = (usersCount: number) => ({type: 'SET-TOTAL-USERS-COUNT', usersCount})\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: 'TOGGLE-IS-FETCHING ', isFetching})\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: string) => ({\r\n    type: 'TOGGLE-IS-FOLLOWING-PROGRESS',\r\n    isFetching,\r\n    userId\r\n})\r\n\r\nexport const getUsers = (currentPage:number,PageSize:number) => {\r\n\r\n    return (dispatch: any) => {\r\n\r\n        dispatch(toggleIsFetching(true))\r\n\r\n        UsersApi.getUsers(currentPage, PageSize)\r\n            .then(data => {\r\n                dispatch(toggleIsFetching(false))\r\n                dispatch(setUsers(data.items))\r\n                dispatch(setTotalUsersCount(data.totalCount))\r\n            })\r\n    }\r\n}\r\n\r\nexport const unFollow = (userId:string) => {\r\n\r\n    return (dispatch: any) => {\r\n\r\n        dispatch(toggleFollowingProgress(true, userId))\r\n        UsersApi.UnFollowUser(userId).then(data => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(unFollowSuccess(userId))\r\n            }\r\n            dispatch(toggleFollowingProgress(false, userId))\r\n        })\r\n    }\r\n}\r\n\r\nexport const follow = (userId:string) => {\r\n\r\n    return (dispatch: any) => {\r\n\r\n        dispatch(toggleFollowingProgress(true, userId))\r\n        UsersApi.FollowUser(userId).then(data => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(followSuccess(userId))\r\n            }\r\n            dispatch(toggleFollowingProgress(false, userId))\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default UsersReducer","export default __webpack_public_path__ + \"static/media/user-png-image-9.ab7efdc7.png\";","import React from 'react';\r\nimport {toggleFollowingProgress, userType} from \"../../Redux/UsersReducer\";\r\nimport UserPhoto from \"../../assets/Img/user-png-image-9.png\";\r\nimport s from \"./Users.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport {UsersApi} from \"../../api/Api\";\r\n\r\nexport type UsersPropsType = {\r\n    users: Array<userType>\r\n    PageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<any>\r\n    followSuccess: (UserId: string) => void\r\n    unFollowSuccess: (UserId: string) => void\r\n    setUsers: (users: any) => void\r\n    setCurrentPage: (Page: number) => void\r\n    setTotalUsersCount: (usersCount: number) => void\r\n    onPageChanged: (p: any) => void\r\n    toggleFollowingProgress: (isFetching: boolean, userId: string) => void\r\n    follow: (userId: string) => void\r\n    unFollow: (userId: string) => void\r\n}\r\n\r\nconst Users = (props: UsersPropsType) => {\r\n    let PagesCount = Math.ceil(props.totalUsersCount / props.PageSize)\r\n\r\n    let pages: any = []\r\n    for (let i = 1; i <= PagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    return (\r\n\r\n\r\n        <div>\r\n\r\n            <div>\r\n                {pages.map((p: any) => <span onClick={(e) => {\r\n                    props.onPageChanged(p)\r\n                }} className={props.currentPage === p ? s.selectedPage : ''}>{p}</span>)}\r\n            </div>\r\n            {\r\n                props.users.map((u: userType) => <div key={u.id}>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={'/profile/' + u.id}>\r\n                        <img src={u.photos.small != null ? u.photos.small : UserPhoto} className={s.photo}/>\r\n    </NavLink>\r\n                        </div>\r\n    </span>\r\n                        <span>\r\n    <div>\r\n        {u.followed\r\n            ? <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\r\n                props.unFollow(u.id)\r\n            }}>Unfollow</button>\r\n            : <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\r\n                props.follow(u.id)\r\n            }}>Follow</button>}\r\n\r\n    </div>\r\n    </span>\r\n                        <span>\r\n    <span>\r\n        <div>{u.name}</div>\r\n    <div>{u.status}</div>\r\n    </span>\r\n    <span>\r\n    <div>{\"u.location.city\"}</div>\r\n    <div>{\"u.location.country\"}</div>\r\n    </span>\r\n    </span>\r\n\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../Redux/Store\";\r\nimport {\r\n    follow,\r\n    followSuccess, getUsers,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    setUsers, toggleFollowingProgress, toggleIsFetching, unFollow,\r\n    unFollowSuccess,\r\n    userType\r\n} from \"../../Redux/UsersReducer\";\r\nimport axios from \"axios\";\r\nimport Users from \"./Users\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport {UsersApi} from \"../../api/Api\";\r\n\r\nexport type UsersAPIPropsType = {\r\n    users: Array<userType>\r\n    PageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<any>\r\n    followSuccess: (UserId: string) => void\r\n    unFollowSuccess: (UserId: string) => void\r\n    setUsers: (users: any) => void\r\n    setCurrentPage: (Page: number) => void\r\n    setTotalUsersCount: (usersCount: number) => void\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n    toggleFollowingProgress: (isFetching: boolean, userId: string) => void\r\n    getUsers: (currentPage: number, PageSize: number) => void\r\n    follow: (userId: string) => void\r\n    unFollow: (userId: string) => void\r\n}\r\n\r\n\r\nclass UsersContainerComponent extends React.Component<UsersAPIPropsType, StateType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.PageSize)\r\n    }\r\n\r\n    onPageChanged = (p: number) => {\r\n        this.props.getUsers(p, this.props.PageSize)\r\n        this.props.setCurrentPage(p)\r\n    }\r\n\r\n    render() {\r\n        return (<>\r\n                {this.props.isFetching ? <CircularProgress/> : null}\r\n                <Users users={this.props.users}\r\n                       setUsers={this.props.setUsers}\r\n                       currentPage={this.props.currentPage}\r\n                       isFetching={this.props.isFetching}\r\n                       followingInProgress={this.props.followingInProgress}\r\n                       followSuccess={this.props.followSuccess}\r\n                       PageSize={this.props.PageSize}\r\n                       setTotalUsersCount={this.props.setTotalUsersCount}\r\n                       setCurrentPage={this.props.setCurrentPage}\r\n                       totalUsersCount={this.props.totalUsersCount}\r\n                       unFollowSuccess={this.props.unFollowSuccess}\r\n                       onPageChanged={this.onPageChanged}\r\n                       toggleFollowingProgress={this.props.toggleFollowingProgress}\r\n                       follow={this.props.follow}\r\n                       unFollow={this.props.unFollow}/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: StateType) => {\r\n    return {\r\n        users: state.UsersPage.users,\r\n        PageSize: state.UsersPage.PageSize,\r\n        totalUsersCount: state.UsersPage.totalUsersCount,\r\n        currentPage: state.UsersPage.currentPage,\r\n        isFetching: state.UsersPage.isFetching,\r\n        followingInProgress: state.UsersPage.followingInProgress\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n    followSuccess,\r\n    unFollowSuccess,\r\n    setUsers,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    toggleIsFetching,\r\n    toggleFollowingProgress,\r\n    getUsers,\r\n    unFollow,\r\n    follow\r\n})(UsersContainerComponent)","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {CircularProgress} from \"@material-ui/core\";\r\n\r\nexport type ProfileInfoPropsType = {\r\n    profile: any\r\n}\r\n\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n\r\n    if (!props.profile) {\r\n        return (<CircularProgress color=\"secondary\"/>)\r\n    }\r\n        return (\r\n            <div className={s.info}>\r\n               <div> {props.profile.fullName}</div>\r\n                <img src={props.profile.photos.large} alt=\"\"/>\r\n                <div>\r\n                <span>{props.profile.aboutMe}</span>\r\n                </div>\r\n                {props.profile.lookingForAJob\r\n                    ?<div><span>Ищу работу</span> <div><span>{props.profile.lookingForAJobDescription}</span></div></div>\r\n                    : <span>Не ищу работу</span>}\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default ProfileInfo","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\nexport type PostPropsType = {\r\n    \r\n    message:string\r\n    likesCount:number\r\n}\r\n\r\nconst Post =(props:PostPropsType) => {\r\n\r\n    return(\r\n        <div className={s.item}>\r\n            <img src='https://i.pinimg.com/236x/74/05/5f/74055f83bfbdc20fdc1f9d1fc116fd26.jpg' />\r\n            {props.message}\r\n            <br></br>\r\n            {props.likesCount} likes\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React, {ChangeEvent} from 'react';\r\nimport { v1 } from 'uuid';\r\nimport { addPostActionCreator, UpdateNewPostTextActionCreator } from '../../../Redux/Store';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport PostPropsType from './Post/Post'\r\n\r\nexport type postsType ={\r\n  message:string\r\n  id:string\r\n  likesCount:number\r\n}\r\n\r\nexport type MyPostsPropsType ={\r\n  posts:Array<postsType>\r\n  newPostText:string\r\n  updateNewPostText:(text:string) => void\r\n  addPost:() =>void\r\n}\r\n\r\nconst MyPosts = (props:MyPostsPropsType) => {\r\n  let postsElements =  props.posts.map((p:postsType) => <Post message={p.message} likesCount={p.likesCount} /> )\r\n\r\n  let newPostElement = React.createRef<HTMLTextAreaElement>()\r\n\r\n  let addPost = () => {\r\n    props.addPost()\r\n  }\r\n\r\n  let updateNewPostText = (e:ChangeEvent<HTMLTextAreaElement>) => {\r\n    props.updateNewPostText(e.currentTarget.value)\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className={s.title}>\r\n      My Posts\r\n      </div>\r\n\r\n        <div className={s.area}>\r\n          <textarea onChange={updateNewPostText} value={props.newPostText} ref={newPostElement} />\r\n        </div>\r\n\r\n        <div className={s.addButton}>\r\n          <button onClick={addPost}>Add Post</button>\r\n        </div>\r\n\r\n      <div className={s.posts}>\r\n        {postsElements}\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MyPosts","import React from 'react';\r\nimport { v1 } from 'uuid';\r\nimport {addPostActionCreator, StateType, UpdateNewPostTextActionCreator} from '../../../Redux/Store';\r\nimport s from './MyPosts.module.css'\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport type postsType ={\r\n  message:string\r\n  id:string\r\n  likesCount:number\r\n}\r\n\r\nlet mapStateToProps = (state:StateType) => {\r\n  return{\r\n    posts:state.ProfilePage.posts,\r\n    newPostText:state.ProfilePage.newPostText\r\n  }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch:any) => {\r\n  return {\r\n    addPost:() => {dispatch(addPostActionCreator())},\r\n    updateNewPostText: (text:string) => {\r\n      if(text) {\r\n        dispatch(UpdateNewPostTextActionCreator(text))\r\n      }\r\n      else {\r\n        dispatch(UpdateNewPostTextActionCreator(''))\r\n      }\r\n    }\r\n    }\r\n  }\r\n\r\n\r\nconst MyPostsContainer = connect(mapStateToProps,mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer\r\n\r\n","import React from 'react';\r\nimport MyPosts, {postsType} from './MyPosts/MyPosts';\r\n\r\nimport s from './Profile.module.css'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profile:any\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo profile={props.profile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React, {useEffect} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport axios from \"axios\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, setUserProfile} from \"../../Redux/ProfileReducer\";\r\nimport {StateType} from \"../../Redux/Store\";\r\nimport {withRouter, RouteComponentProps} from 'react-router';\r\nimport {ProfileApi} from \"../../api/Api\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\n\r\ntype mapStatePropsType = {\r\n    profile: any\r\n    isAuth: boolean\r\n}\r\n\r\ntype mapDispatchPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n}\r\n\r\ntype OwnPropsType = mapStatePropsType & mapDispatchPropsType\r\n\r\ntype PropsType = RouteComponentProps<PathParamType> & OwnPropsType\r\n\r\n\r\nlet ProfileAPIContainer = (props: PropsType) => {\r\n    useEffect(() => {\r\n        let userId = props.match.params.userId\r\n        props.getUserProfile(userId)\r\n    }, [])\r\n    if (!props.isAuth) return <Redirect to='/login' />\r\n    return (\r\n        <Profile profile={props.profile}/>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: any): mapStatePropsType => ({\r\n    profile: state.ProfilePage.profile,\r\n    isAuth: state.Auth.isAuth\r\n})\r\n\r\nlet withUrlDataContainerComponent = withRouter(ProfileAPIContainer)\r\nconst ProfileContainer = connect(mapStateToProps, {getUserProfile})(withUrlDataContainerComponent)\r\nexport default ProfileContainer","import React from 'react';\r\nimport s from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type HeaderPropsType = {\r\n    isAuth:boolean\r\n    login:string\r\n}\r\n\r\nconst Header = (props:HeaderPropsType) => {\r\n    return (\r\n        <div className={s.header}>\r\n            <img src='https://cdn.logo.com/hotlink-ok/logo-social-sq.png'/>\r\n\r\n            <div className={s.loginBlock}>\r\n\r\n\r\n                {props.isAuth?props.login :<NavLink to='/login'>Login</NavLink>}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header","import {v1} from \"uuid\";\r\nimport {AuthApi} from \"../api/Api\";\r\n\r\n\r\nlet InitialState = {\r\n    userId: null,\r\n    email:\"null\",\r\n    login:\"null\",\r\n    isFetching:false,\r\n    isAuth:false,\r\n}\r\n\r\n\r\nconst AuthReducer = (state: any = InitialState, action: any) => {\r\n    switch (action.type) {\r\n        case 'SET-USER-DATA':\r\n            return{...state,...action.data,isAuth:true}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (userId:any,email:string,login:string) => ({type:'SET-USER-DATA',data: {userId, email, login}})\r\n\r\nexport const Auth = () => {\r\n    return (dispatch:any) => {\r\n        AuthApi.me().then(data => {\r\n            if(data.resultCode === 0 ){\r\n                let{id,email,login} = data.data\r\n                dispatch(setAuthUserData(id, email, login))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default AuthReducer","import React from 'react';\r\nimport s from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {StateType} from \"../../Redux/Store\";\r\nimport Header from \"./Header\";\r\nimport axios from \"axios\";\r\nimport {connect} from \"react-redux\";\r\nimport {Auth, setAuthUserData} from \"../../Redux/AuthReducer\";\r\n\r\n\r\nexport type HeaderContainerPropsType = {\r\n    isAuth: boolean\r\n    login: string\r\n    setAuthUserData: (userId: any, email: string, login: string) => void\r\n    Auth:() => void\r\n}\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerPropsType, StateType> {\r\n\r\n    componentDidMount() {\r\n        this.props.Auth()\r\n    }\r\n\r\n    render() {\r\n        return <Header isAuth={this.props.isAuth} login={this.props.login}/>\r\n    };\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    isAuth: state.Auth.isAuth,\r\n    login: state.Auth.login\r\n})\r\n\r\nexport default connect(mapStateToProps, {setAuthUserData, Auth})(HeaderContainer)","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Login.module.css'\r\n\r\nexport type LoginPropsType = {\r\n\r\n}\r\n\r\nconst Login = (props:LoginPropsType) => {\r\n    return(\r\n        <h1>Login</h1>\r\n    )\r\n}\r\n\r\nexport default Login","import React from 'react';\r\nimport './App.css';\r\nimport NavBar from './Components/NavBar/NavBar';\r\nimport {Route} from 'react-router';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport News from './Components/News/News';\r\nimport Settings from './Components/Settings/Settings';\r\nimport Music from './Components/Music/Music';\r\nimport DialogsContainer from \"./Components/Dialogs/DialogsContainer\";\r\nimport UsersContainer from \"./Components/Users/UsersContainer\";\r\nimport ProfileContainer from \"./Components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./Components/Header/HeaderContainer\";\r\nimport Login from \"./Components/Login/Login\";\r\n\r\ntype AppPropsType = {\r\n    dispatch: (action: any) => void\r\n    store: any\r\n}\r\n\r\n\r\nfunction App(props: AppPropsType) {\r\n\r\n    let state = props.store.getState()\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"App\">\r\n                <HeaderContainer/>\r\n                <NavBar/>\r\n                <div className='content'>\r\n                    <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\r\n                    <Route path='/dialogs' render={() => <DialogsContainer/>}/>\r\n                    <Route path='/news' render={() => <News/>}/>\r\n                    <Route path='/users' render={() => <UsersContainer/>}/>\r\n                    <Route path='/music' render={() => <Music/>}/>\r\n                    <Route path='/settings' render={() => <Settings/>}/>\r\n                    <Route path='/login' render={() => <Login/>} />\r\n                </div>\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {ProfileReducer} from \"./ProfileReducer\";\r\nimport {DialogsReducer} from \"./DialogsReducer\";\r\nimport {SideBarReducer} from \"./SideBarReducer\";\r\nimport UsersReducer from \"./UsersReducer\";\r\nimport AuthReducer from \"./AuthReducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\n\r\nlet reducers = combineReducers({\r\n    ProfilePage:ProfileReducer,\r\n    DialogsPage:DialogsReducer,\r\n    UsersPage:UsersReducer,\r\n    SideBar:SideBarReducer,\r\n    Auth:AuthReducer,\r\n})\r\nlet store = createStore(reducers,applyMiddleware(thunkMiddleware))\r\n\r\nexport default  store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './Redux/ReduxStore'\r\nimport {StateType} from \"./Redux/Store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n      <App dispatch={store.dispatch.bind(store)} store={store}  />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n  );\r\n\r\n\r\n\r\n"],"sourceRoot":""}