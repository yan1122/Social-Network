{"version":3,"sources":["Components/Dialogs/Dialogs.module.css","Components/Header/Header.module.css","Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Users/Users.module.css","Components/NavBar/NavBar.module.css","Components/Header/Header.tsx","Components/NavBar/NavBar.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Redux/ProfileReducer.ts","Redux/DialogsReducer.ts","Redux/SideBarReducer.ts","Redux/Store.ts","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/News/News.tsx","Components/Settings/Settings.tsx","Components/Music/Music.tsx","Components/Dialogs/DialogsItem/DialogsItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx","assets/Img/user-png-image-9.png","Components/Users/Users.tsx","Redux/UsersReducer.ts","Components/Users/UsersContainer.tsx","App.tsx","Redux/ReduxStore.ts","index.tsx"],"names":["module","exports","Header","className","s","header","src","NavBar","nav","to","activeClassName","ActiveItem","item","ProfileInfo","info","InitialState","posts","message","id","v1","likesCount","newPostText","ProfileReducer","state","action","type","newPost","newState","push","NewText","dialogsData","name","messagesData","newMessageText","DialogsReducer","body","SideBarReducer","UpdateNewPostTextActionCreator","Post","props","MyPosts","postsElements","map","p","newPostElement","React","createRef","title","area","onChange","e","updateNewPostText","currentTarget","value","ref","addButton","onClick","addPost","MyPostsContainer","connect","ProfilePage","dispatch","text","Profile","content","News","Settings","Music","DialogItem","Message","Dialogs","dialogsElement","d","messagesElement","m","dialogs","dialogsItems","messages","onNewMessageChange","placeholder","onSendMessageClick","DialogsContainer","DialogsPage","Users","axios","get","then","response","setUsers","data","items","this","users","u","UserPhoto","photo","isFollowed","unFollow","follow","status","Component","UsersReducer","StateCopy","UserId","UsersContainer","UsersPage","FollowAC","UnFollowAC","setUsersAC","App","store","getState","path","render","reducers","combineReducers","SideBar","createStore","ReactDOM","StrictMode","bind","document","getElementById"],"mappings":"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","file":"static/js/main.034e7e12.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3tpU9\",\"dialogsItems\":\"Dialogs_dialogsItems__ienY8\",\"messages\":\"Dialogs_messages__3m0ZH\",\"message\":\"Dialogs_message__3pa39\",\"item\":\"Dialogs_item__2lstC\",\"ActiveItem\":\"Dialogs_ActiveItem__tWhqB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1riTh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"ProfileInfo_info__1Kbs0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3RXIq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"Users_photo__qY-Gi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__1i1C_\",\"item\":\"NavBar_item__1iqZI\",\"ActiveItem\":\"NavBar_ActiveItem__2m0l5\"};","import React from 'react';\r\nimport s from './Header.module.css'\r\n\r\nconst Header = () => {\r\n    return(\r\n        <div className={s.header}>\r\n        <img src='https://cdn.logo.com/hotlink-ok/logo-social-sq.png' />\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './NavBar.module.css'\r\n\r\nconst NavBar = () => {\r\n    return(\r\n        <div className={s.nav}>\r\n        <div>\r\n          <NavLink to='/profile' activeClassName={s.ActiveItem} className={s.item}>Profile</NavLink>\r\n        </div>\r\n        <div>\r\n          <NavLink to='/dialogs' activeClassName={s.ActiveItem} className={s.item}>Messages</NavLink>\r\n        </div>\r\n        <div>\r\n          <NavLink to='/news' activeClassName={s.ActiveItem} className={s.item}>News</NavLink>\r\n        </div>\r\n            <div>\r\n                <NavLink to='/users' activeClassName={s.ActiveItem} className={s.item}>Users</NavLink>\r\n            </div>\r\n        <div>\r\n          <NavLink to='/music' activeClassName={s.ActiveItem} className={s.item}>Music</NavLink>\r\n        </div>\r\n        <div>\r\n          <NavLink to='settings' activeClassName={s.ActiveItem} className={s.item}>Settings</NavLink>\r\n        </div>\r\n        \r\n      </div>\r\n    )\r\n}\r\n\r\nexport default NavBar","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\n\r\nconst ProfileInfo = () => {\r\n    return(\r\n        <div className={s.info}>\r\n          ava+description\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","import {v1} from \"uuid\";\r\nimport {ProfilePageType} from \"./Store\";\r\n\r\nlet InitialState = {\r\n    posts: [\r\n    {message: 'Я русский', id: v1(), likesCount: 12},\r\n    {message: 'I am not Russian', id: v1(), likesCount: 1},\r\n    {message: 'I am learn React', id: v1(), likesCount: 23},\r\n],\r\n    newPostText: ''\r\n}\r\n\r\nexport const ProfileReducer = (state:ProfilePageType = InitialState,action: any) => {\r\n    switch (action.type) {\r\n\r\n        case 'ADD-POST':{\r\n            let newPost = {message: state.newPostText, id: v1(), likesCount: 0}\r\n            let newState = {...state}\r\n            newState.posts=[...state.posts]\r\n            newState.posts.push(newPost)\r\n            newState.newPostText = ''\r\n            return(newState)}\r\n\r\n        case 'UPDATE-NEW-POST-TEXT' :\r\n            let newState = {...state}\r\n            newState.newPostText = action.NewText\r\n            return newState\r\n\r\n        default:return state\r\n    }\r\n\r\n}","import {v1} from \"uuid\";\r\nimport {DialogsPageType, StateType} from \"./Store\";\r\nimport {DialogsDataArrayType, MessagesDataArrayType} from \"../Components/Dialogs/Dialogs\";\r\n\r\nexport type InitialStateType = {\r\n    dialogsData:DialogsDataArrayType\r\n    messagesData:MessagesDataArrayType\r\n    newMessageText:string\r\n}\r\n\r\nlet InitialState:InitialStateType = {\r\n    dialogsData:\r\n        [{id: v1(), name: 'Sasha'},\r\n        {id: v1(), name: 'Viktor'},\r\n        {id: v1(), name: 'Lesha'},\r\n        {id: v1(), name: 'Elena'},\r\n        {id: v1(), name: 'Dima'},\r\n        {id: v1(), name: 'Ivan'},]\r\n    ,\r\n    messagesData: [\r\n        {message: 'Hi', id: v1()},\r\n        {message: 'How are you?', id: v1()},\r\n        {message: 'Lets drink beer today', id: v1()},\r\n    ],\r\n    newMessageText:''\r\n}\r\n\r\nexport const DialogsReducer = (state:DialogsPageType = InitialState, action: any) => {\r\n\r\n\r\n\r\n    switch(action.type) {\r\n        case \"UPDATE-NEW-MESSAGE-TEXT\" :{\r\n            state.newMessageText = action.body\r\n            return {...state}}\r\n\r\n        case \"SEND-MESSAGE\" :\r\n            let body = state.newMessageText\r\n            state.messagesData.push({message:body,id:v1()})\r\n            state.newMessageText = ''\r\n            return {...state}\r\n        default:return state\r\n    }\r\n}","import {SideBarType} from \"./Store\";\r\n\r\nlet InitialState = {}\r\n\r\nexport const SideBarReducer = (state:SideBarType = InitialState,action:any) => {\r\n\r\n    return(state)\r\n}","import {MessagesDataType} from './../Components/Dialogs/Dialogs';\r\nimport {v1} from \"uuid\"\r\nimport {DialogsDataType} from \"../Components/Dialogs/Dialogs\"\r\nimport {postsType} from \"../Components/Profile/MyPosts/MyPosts\"\r\nimport {ProfileReducer} from \"./ProfileReducer\";\r\nimport {DialogsReducer} from \"./DialogsReducer\";\r\nimport {SideBarReducer} from \"./SideBarReducer\";\r\nimport {userType} from \"./UsersReducer\";\r\n\r\nexport type StoreType = {\r\n    _state: StateType\r\n    _callSubscriber: () => void\r\n    getState: () => StateType\r\n    subscribe: (observer: () => void) => void\r\n    dispatch: (action: any) => void\r\n}\r\n\r\nexport type ProfilePageType = {\r\n    posts: Array<postsType>\r\n    newPostText: string\r\n}\r\n\r\nexport type DialogsPageType = {\r\n    dialogsData: Array<DialogsDataType>\r\n    messagesData: Array<MessagesDataType>\r\n    newMessageText:string\r\n}\r\n\r\nexport type SideBarType = {}\r\n\r\nexport type UsersPageType = {\r\n    users:Array<userType>\r\n}\r\n\r\nexport type StateType = {\r\n    ProfilePage: ProfilePageType\r\n    DialogsPage: DialogsPageType\r\n    SideBar:SideBarType\r\n    UsersPage:UsersPageType\r\n}\r\n\r\nlet store: any = {\r\n    _state: {\r\n        ProfilePage: {\r\n            posts: [\r\n                {message: 'Я русский', id: v1(), likesCount: 12},\r\n                {message: 'I am not Russian', id: v1(), likesCount: 1},\r\n                {message: 'I am learn React', id: v1(), likesCount: 23},\r\n            ],\r\n            newPostText: ''\r\n        },\r\n\r\n        DialogsPage: {\r\n            dialogsData: [\r\n                {id: v1(), name: 'Sasha'},\r\n                {id: v1(), name: 'Viktor'},\r\n                {id: v1(), name: 'Lesha'},\r\n                {id: v1(), name: 'Elena'},\r\n                {id: v1(), name: 'Dima'},\r\n                {id: v1(), name: 'Ivan'}\r\n            ],\r\n            messagesData: [\r\n                {message: 'Hi', id: v1()},\r\n                {message: 'How are you?', id: v1()},\r\n                {message: 'Lets drink beer today', id: v1()}\r\n            ],\r\n            newMessageText:''\r\n        },\r\n\r\n        SideBar:{}\r\n    },\r\n\r\n    _callSubscriber() {\r\n        console.log('State changed')\r\n    },\r\n\r\n    getState() {\r\n        return (this._state)\r\n    },\r\n\r\n    subscribe(observer: () => void) {\r\n        this._callSubscriber = observer\r\n    },\r\n\r\n    dispatch(action: any) {\r\n\r\n        ProfileReducer(this._state.ProfilePage,action)\r\n        DialogsReducer(this._state.DialogsPage,action)\r\n        SideBarReducer(this._state.SideBar,action)\r\n            this._callSubscriber()\r\n        }\r\n    }\r\n\r\n\r\nexport const addPostActionCreator = () => {\r\n    return {type: 'ADD-POST'}\r\n}\r\n\r\nexport const UpdateNewPostTextActionCreator = (NewText: string) => {\r\n    return {type: 'UPDATE-NEW-POST-TEXT', NewText: NewText}\r\n}\r\n\r\nexport const UpdateNewMessageTextActionCreator = (body:string) => {\r\n    return {type: 'UPDATE-NEW-MESSAGE-TEXT', body:body}\r\n}\r\n\r\nexport const SendMessageActionCreator = () => {\r\n    return {type: 'SEND-MESSAGE'}\r\n}\r\n\r\n\r\nexport default store\r\n\r\n","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\nexport type PostPropsType = {\r\n    \r\n    message:string\r\n    likesCount:number\r\n}\r\n\r\nconst Post =(props:PostPropsType) => {\r\n\r\n    return(\r\n        <div className={s.item}>\r\n            <img src='https://i.pinimg.com/236x/74/05/5f/74055f83bfbdc20fdc1f9d1fc116fd26.jpg' />\r\n            {props.message}\r\n            <br></br>\r\n            {props.likesCount} likes\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React, {ChangeEvent} from 'react';\r\nimport { v1 } from 'uuid';\r\nimport { addPostActionCreator, UpdateNewPostTextActionCreator } from '../../../Redux/Store';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport PostPropsType from './Post/Post'\r\n\r\nexport type postsType ={\r\n  message:string\r\n  id:string\r\n  likesCount:number\r\n}\r\n\r\nexport type MyPostsPropsType ={\r\n  posts:Array<postsType>\r\n  newPostText:string\r\n  updateNewPostText:(text:string) => void\r\n  addPost:() =>void\r\n}\r\n\r\nconst MyPosts = (props:MyPostsPropsType) => {\r\n  let postsElements =  props.posts.map((p:postsType) => <Post message={p.message} likesCount={p.likesCount} /> )\r\n\r\n  let newPostElement = React.createRef<HTMLTextAreaElement>()\r\n\r\n  let addPost = () => {\r\n    props.addPost()\r\n  }\r\n\r\n  let updateNewPostText = (e:ChangeEvent<HTMLTextAreaElement>) => {\r\n    props.updateNewPostText(e.currentTarget.value)\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className={s.title}>\r\n      My Posts\r\n      </div>\r\n\r\n        <div className={s.area}>\r\n          <textarea onChange={updateNewPostText} value={props.newPostText} ref={newPostElement} />\r\n        </div>\r\n\r\n        <div className={s.addButton}>\r\n          <button onClick={addPost}>Add Post</button>\r\n        </div>\r\n\r\n      <div className={s.posts}>\r\n        {postsElements}\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MyPosts","import React from 'react';\r\nimport { v1 } from 'uuid';\r\nimport {addPostActionCreator, StateType, UpdateNewPostTextActionCreator} from '../../../Redux/Store';\r\nimport s from './MyPosts.module.css'\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport type postsType ={\r\n  message:string\r\n  id:string\r\n  likesCount:number\r\n}\r\n\r\nlet mapStateToProps = (state:StateType) => {\r\n  return{\r\n    posts:state.ProfilePage.posts,\r\n    newPostText:state.ProfilePage.newPostText\r\n  }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch:any) => {\r\n  return {\r\n    addPost:() => {dispatch(addPostActionCreator())},\r\n    updateNewPostText: (text:string) => {\r\n      if(text) {\r\n        dispatch(UpdateNewPostTextActionCreator(text))\r\n      }\r\n      else {\r\n        dispatch(UpdateNewPostTextActionCreator(''))\r\n      }\r\n    }\r\n    }\r\n  }\r\n\r\n\r\nconst MyPostsContainer = connect(mapStateToProps,mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer\r\n\r\n","import React from 'react';\r\nimport MyPosts, {postsType} from './MyPosts/MyPosts';\r\n\r\nimport s from './Profile.module.css'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\ntype ProfilePropsType = {\r\n    ProfilePage: any\r\n    dispatch: (action: any) => void\r\n    store: any\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from 'react';\r\nimport s from './News.module.css'\r\n\r\nconst News =() => {\r\n    return(\r\n        <span>News</span>\r\n    )\r\n}\r\n\r\nexport default News","import React from 'react';\r\nimport s from './Settings.module.css'\r\n\r\nconst Settings =() => {\r\n    return(\r\n        <span>Settings</span>\r\n    )\r\n}\r\n\r\nexport default Settings","import React from 'react';\r\nimport s from './Music.module.css'\r\n\r\nconst Music =() => {\r\n    return(\r\n        <span>Music</span>\r\n    )\r\n}\r\n\r\nexport default Music","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { v1 } from 'uuid';\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n    return (\r\n        <div >\r\n            <NavLink className={s.item} activeClassName={s.ActiveItem} to={'/dialogs/' + props.id}>{props.name} </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem","import React from 'react';\r\nimport { v1 } from 'uuid';\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\n\r\nexport default Message","import React, {ChangeEvent} from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {v1} from 'uuid';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from './DialogsItem/DialogsItem';\r\nimport Message from './Message/Message';\r\nimport {DialogsPageType, SendMessageActionCreator, UpdateNewMessageTextActionCreator} from \"../../Redux/Store\";\r\n\r\n\r\ntype DialogsPropsType = {\r\n    onNewMessageChange: (text: string) => void\r\n    onSendMessageClick: () => void\r\n    dialogsData: Array<DialogsDataType>\r\n    messagesData: Array<MessagesDataType>\r\n    newMessageText:string\r\n}\r\n\r\nexport type DialogsDataType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport type MessagesDataType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\nexport type DialogsDataArrayType = Array<DialogsDataType>\r\n\r\nexport type MessagesDataArrayType = Array<MessagesDataType>\r\n\r\n\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n    let dialogsElement = props.dialogsData.map((d:DialogsDataType) =>  <DialogItem key={d.id} name={d.name} id={d.id} />)\r\n    let messagesElement = props.messagesData.map((m:MessagesDataType) => <Message key={m.id} message={m.message}/>)\r\n    let newMessageText = props.newMessageText\r\n    let onSendMessageClick = () => {\r\n        props.onSendMessageClick()\r\n    }\r\n    let onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.onNewMessageChange(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElement}</div>\r\n                <div>\r\n                    <div><textarea value={newMessageText} onChange={onNewMessageChange}\r\n                                   placeholder={'Enter your message'}></textarea></div>\r\n                    <div>\r\n                        <button onClick={onSendMessageClick}>Send</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs","import React, {ChangeEvent} from 'react';\r\nimport DialogItem from './DialogsItem/DialogsItem';\r\nimport Message from './Message/Message';\r\nimport {\r\n    DialogsPageType,\r\n    SendMessageActionCreator,\r\n    StateType,\r\n    UpdateNewMessageTextActionCreator\r\n} from \"../../Redux/Store\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nexport type DialogsDataType ={\r\n    id:string\r\n    name:string\r\n}\r\n\r\nlet mapStateToProps = (state:StateType) => {\r\nreturn {\r\n    dialogsData:state.DialogsPage.dialogsData,\r\n    messagesData:state.DialogsPage.messagesData,\r\n    newMessageText:state.DialogsPage.newMessageText\r\n}\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        onNewMessageChange:(text:string) => {dispatch(UpdateNewMessageTextActionCreator(text))},\r\n        onSendMessageClick:() => {dispatch(SendMessageActionCreator())}\r\n    }\r\n\r\n}\r\n\r\nconst DialogsContainer = connect(mapStateToProps,mapDispatchToProps)(Dialogs)\r\n\r\nexport default DialogsContainer","export default __webpack_public_path__ + \"static/media/user-png-image-9.ab7efdc7.png\";","import React from 'react';\r\nimport {FollowAC, setUsersAC, UnFollowAC, userType} from \"../../Redux/UsersReducer\";\r\nimport s from './Users.module.css'\r\nimport {v1} from \"uuid\";\r\nimport axios from \"axios\";\r\nimport UserPhoto from \"./../../assets/Img/user-png-image-9.png\"\r\nimport {StateType} from \"../../Redux/Store\";\r\n\r\nexport type UsersPropsType = {\r\n    users: Array<userType>\r\n    follow: (UserId: string) => void\r\n    unFollow: (UserId: string) => void\r\n    setUsers: (users: any) => void\r\n}\r\n\r\nclass Users extends React.Component<UsersPropsType, StateType>{\r\n\r\n    componentDidMount() {\r\n        axios.get('https://social-network.samuraijs.com/api/1.0/users').then(response => {\r\n            this.props.setUsers(response.data.items)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.props.users.map((u: userType) => <div key={u.id}>\r\n        <span>\r\n            <div>\r\n                <img src={UserPhoto} className={s.photo}/>\r\n            </div>\r\n        </span>\r\n                            <span>\r\n            <div>\r\n                {u.isFollowed\r\n                    ? <button onClick={() => this.props.unFollow(u.id)}>Unfollow</button>\r\n                    : <button onClick={() => this.props.follow(u.id)}>Follow</button>}\r\n                </div>\r\n        </span>\r\n                            <span>\r\n                <span>\r\n                    <div>{u.name}</div>\r\n                    <div>{u.status}</div>\r\n                </span>\r\n                <span>\r\n                    <div>{\"u.location.city\"}</div>\r\n                    <div>{\"u.location.country\"}</div>\r\n                </span>\r\n            </span>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Users","import {v1} from \"uuid\";\r\n\r\nexport type userType = {\r\n    id:string\r\n    isFollowed:boolean\r\n    photoUrl:string\r\n    name:string\r\n    status:string\r\n    location:any\r\n}\r\n\r\n\r\nlet InitialState = {\r\n    users:[\r\n\r\n    ]\r\n}\r\n\r\n\r\n\r\nconst UsersReducer = (state:any = InitialState , action:any) => {\r\n    switch (action.type) {\r\n\r\n        case 'FOLLOW' :{\r\n            let StateCopy = {\r\n                ...state,\r\n                users:state.users.map((u:userType) => {\r\n                    if(u.id === action.UserId) {\r\n                        return{...u,isFollowed:true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n            return StateCopy}\r\n\r\n\r\n        case 'UNFOLLOW' :\r\n            let StateCopy = {\r\n                ...state,\r\n                users:state.users.map((u:userType) => {\r\n                    if(u.id === action.UserId) {\r\n                        return{...u,isFollowed:false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n            return StateCopy\r\n\r\n        case 'SET-USERS':\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n\r\n        default:return state\r\n    }\r\n}\r\n\r\nexport const FollowAC = (UserId:string) => ({type:'FOLLOW',UserId})\r\nexport const UnFollowAC =(UserId:string) => ({type:'UNFOLLOW',UserId})\r\nexport const setUsersAC = (users:any) => ({type:'SET-USERS',users})\r\n\r\nexport default UsersReducer","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport Users from \"./Users\";\r\nimport {StateType} from \"../../Redux/Store\";\r\nimport {FollowAC, setUsersAC, UnFollowAC, userType} from \"../../Redux/UsersReducer\";\r\n\r\nconst mapStateToProps = (state:StateType) => {\r\nreturn {\r\n    users:state.UsersPage.users\r\n}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch:any) => {\r\nreturn{\r\n    follow:(UserId:string) => dispatch(FollowAC(UserId)),\r\n    unFollow:(UserId:string) => dispatch(UnFollowAC(UserId)),\r\n    setUsers:(users:any) => dispatch(setUsersAC(users))\r\n}\r\n}\r\n\r\n\r\n\r\nconst UsersContainer = connect (mapStateToProps,mapDispatchToProps) (Users)\r\n\r\nexport default UsersContainer","import React from 'react';\r\nimport './App.css';\r\nimport Header from './Components/Header/Header';\r\nimport NavBar from './Components/NavBar/NavBar';\r\nimport Profile from './Components/Profile/Profile';\r\nimport { Route } from 'react-router';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport News from './Components/News/News';\r\nimport Settings from './Components/Settings/Settings';\r\nimport Music from './Components/Music/Music';\r\nimport DialogsContainer from \"./Components/Dialogs/DialogsContainer\";\r\nimport UsersContainer from \"./Components/Users/UsersContainer\";\r\n\r\ntype AppPropsType ={\r\ndispatch:(action:any) => void\r\n  store:any\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction App(props:AppPropsType) {\r\n\r\n  let state = props.store.getState()\r\n  return (\r\n    <BrowserRouter>\r\n    <div className=\"App\">\r\n      <Header />\r\n      <NavBar />\r\n      <div className='content'>\r\n      <Route path='/profile' render={() => <Profile dispatch={props.dispatch} store={props.store} ProfilePage={state.ProfilePage} />} />\r\n      <Route path='/dialogs' render={() => <DialogsContainer />} />\r\n      <Route path='/news' render={() => <News />} />\r\n        <Route path='/users' render={() => <UsersContainer />} />\r\n      <Route path='/music' render={() => <Music />} />\r\n      <Route path='/settings' render={() => <Settings />} />\r\n      </div>\r\n    </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {ProfileReducer} from \"./ProfileReducer\";\r\nimport {DialogsReducer} from \"./DialogsReducer\";\r\nimport {SideBarReducer} from \"./SideBarReducer\";\r\nimport UsersReducer from \"./UsersReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    ProfilePage:ProfileReducer,\r\n    DialogsPage:DialogsReducer,\r\n    UsersPage:UsersReducer,\r\n    SideBar:SideBarReducer\r\n})\r\nlet store = createStore(reducers)\r\n\r\nexport default  store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './Redux/ReduxStore'\r\nimport {StateType} from \"./Redux/Store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n      <App dispatch={store.dispatch.bind(store)} store={store}  />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n  );\r\n\r\n\r\n\r\n"],"sourceRoot":""}